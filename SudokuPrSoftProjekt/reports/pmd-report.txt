src/main/java/application/BasicGameBuilder.java:1:	ExcessiveImports:	ExcessiveImports: A high number of imports can indicate a high degree of coupling within an object.
src/main/java/application/BasicGameBuilder.java:1:	ExcessiveImports:	ExcessiveImports: A high number of imports can indicate a high degree of coupling within an object.
src/main/java/application/BasicGameBuilder.java:36:	AbstractNaming:	AbstractNaming: Abstract classes should be named AbstractXXX
src/main/java/application/BasicGameBuilder.java:36:	AbstractNaming:	AbstractNaming: Abstract classes should be named AbstractXXX
src/main/java/application/BasicGameBuilder.java:36:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/BasicGameBuilder.java:36:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/BasicGameBuilder.java:38:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:38:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:38:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:38:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:41:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:41:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:41:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:41:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:42:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:42:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:42:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:42:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:43:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:43:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:44:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:44:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:45:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:45:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:46:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:46:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:46:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:46:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:47:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:47:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:47:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:47:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:50:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:50:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:50:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:50:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:53:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:53:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:53:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:53:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:54:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:54:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:55:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:55:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:56:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:56:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:56:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:56:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:57:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:57:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:57:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:57:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:59:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:59:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:59:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:59:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:59:	LooseCoupling:	LooseCoupling: Avoid using implementation types like 'ArrayList'; use the interface instead
src/main/java/application/BasicGameBuilder.java:59:	LooseCoupling:	LooseCoupling: Avoid using implementation types like 'ArrayList'; use the interface instead
src/main/java/application/BasicGameBuilder.java:61:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:61:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:61:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:61:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:64:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:64:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:64:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:64:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:65:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:65:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:65:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:65:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:68:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:68:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:68:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:68:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:70:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:70:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:70:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:70:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:71:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:71:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:71:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:71:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:75:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:75:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:89:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:89:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:89:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:89:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:89:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:89:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:93:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:93:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:93:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:93:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:95:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:95:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:95:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:95:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:95:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:95:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:97:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:97:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:97:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:97:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:99:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:99:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:117:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:117:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:168:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:168:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:170:	ShortVariable:	ShortVariable: Avoid variables with short names like mn
src/main/java/application/BasicGameBuilder.java:170:	ShortVariable:	ShortVariable: Avoid variables with short names like mn
src/main/java/application/BasicGameBuilder.java:175:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:175:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:175:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/application/BasicGameBuilder.java:175:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/application/BasicGameBuilder.java:176:	ForLoopCanBeForeach:	ForLoopCanBeForeach: This for loop can be replaced by a foreach loop
src/main/java/application/BasicGameBuilder.java:176:	ForLoopCanBeForeach:	ForLoopCanBeForeach: This for loop can be replaced by a foreach loop
src/main/java/application/BasicGameBuilder.java:178:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/BasicGameBuilder.java:178:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/BasicGameBuilder.java:195:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:195:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:195:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/application/BasicGameBuilder.java:195:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/application/BasicGameBuilder.java:208:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:208:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:208:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:208:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:208:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:208:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:211:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:211:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:211:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:211:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:211:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:211:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:212:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:212:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:212:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:212:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:212:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:212:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:213:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:213:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:213:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:213:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:213:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:213:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:214:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:214:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:214:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:214:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:214:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:214:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:215:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:215:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:215:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:215:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:215:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:215:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:216:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:216:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:216:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:216:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:216:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:216:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:217:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:217:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:217:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:217:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:217:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:217:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:218:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:218:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:218:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:218:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:218:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:218:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:221:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:221:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:221:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:221:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:221:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:221:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:222:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:222:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:222:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:222:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:222:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:222:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:223:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:223:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:223:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:223:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:223:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:223:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:224:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:224:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:224:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:224:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:224:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:224:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:225:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:225:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:225:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:225:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:225:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:225:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:226:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:226:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:226:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:226:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:226:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:226:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:229:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:229:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:229:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:229:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:229:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:229:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:230:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:230:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:230:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:230:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:230:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:230:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:231:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:231:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:231:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:231:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:231:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:231:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:232:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:232:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:232:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:232:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:232:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:232:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:235:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:235:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:235:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:235:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:235:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:235:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:236:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:236:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:236:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:236:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:236:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:236:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:239:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:239:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:239:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:239:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:239:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:239:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:240:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:240:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:240:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:240:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:240:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:240:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:241:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:241:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/BasicGameBuilder.java:241:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:241:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/BasicGameBuilder.java:241:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:241:	FieldDeclarationsShouldBeAtStartOfClass:	FieldDeclarationsShouldBeAtStartOfClass: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
src/main/java/application/BasicGameBuilder.java:339:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:339:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:358:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:358:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:362:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:362:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:373:	MethodReturnsInternalArray:	MethodReturnsInternalArray: Returning 'textField' may expose an internal array.
src/main/java/application/BasicGameBuilder.java:373:	MethodReturnsInternalArray:	MethodReturnsInternalArray: Returning 'textField' may expose an internal array.
src/main/java/application/BasicGameBuilder.java:376:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:376:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:388:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:388:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:392:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:392:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:402:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:402:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:435:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/BasicGameBuilder.java:435:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/CloseWindowStage.java:12:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/CloseWindowStage.java:12:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/CloseWindowStage.java:12:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/CloseWindowStage.java:12:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/CloseWindowStage.java:15:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/CloseWindowStage.java:15:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/CloseWindowStage.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/CloseWindowStage.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/CloseWindowStage.java:18:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/CloseWindowStage.java:18:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/CustomColorPicker.java:14:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/CustomColorPicker.java:14:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/CustomColorPicker.java:14:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/CustomColorPicker.java:14:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/CustomColorPicker.java:17:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/CustomColorPicker.java:17:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/CustomColorPicker.java:17:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/CustomColorPicker.java:17:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/CustomColorPicker.java:21:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/CustomColorPicker.java:21:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/CustomColorPicker.java:50:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the ColorRectTooltipCell nested class if you want a default access modifier
src/main/java/application/CustomColorPicker.java:50:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the ColorRectTooltipCell nested class if you want a default access modifier
src/main/java/application/CustomColorPicker.java:50:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/CustomColorPicker.java:50:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/CustomColorPicker.java:61:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the ColorRectCell nested class if you want a default access modifier
src/main/java/application/CustomColorPicker.java:61:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the ColorRectCell nested class if you want a default access modifier
src/main/java/application/CustomColorPicker.java:61:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/CustomColorPicker.java:61:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/FreeFormGameBuilder.java:13:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/FreeFormGameBuilder.java:13:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/FreeFormGameBuilder.java:15:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/FreeFormGameBuilder.java:15:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/FreeFormGameBuilder.java:15:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the colorPicker field if you want a default access modifier
src/main/java/application/FreeFormGameBuilder.java:15:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the colorPicker field if you want a default access modifier
src/main/java/application/FreeFormGameBuilder.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/FreeFormGameBuilder.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/FreeFormGameBuilder.java:15:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/FreeFormGameBuilder.java:15:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/FreeFormGameBuilder.java:19:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/FreeFormGameBuilder.java:19:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/FreeFormGameBuilder.java:19:	LooseCoupling:	LooseCoupling: Avoid using implementation types like 'ArrayList'; use the interface instead
src/main/java/application/FreeFormGameBuilder.java:19:	LooseCoupling:	LooseCoupling: Avoid using implementation types like 'ArrayList'; use the interface instead
src/main/java/application/FreeFormGameBuilder.java:21:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/FreeFormGameBuilder.java:21:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/FreeFormGameBuilder.java:27:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/FreeFormGameBuilder.java:27:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/FreeFormGameBuilder.java:27:	MissingOverride:	MissingOverride: The method 'createBoard()' is missing an @Override annotation.
src/main/java/application/FreeFormGameBuilder.java:27:	MissingOverride:	MissingOverride: The method 'createBoard()' is missing an @Override annotation.
src/main/java/application/FreeFormGameBuilder.java:32:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/FreeFormGameBuilder.java:32:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/FreeFormGameBuilder.java:63:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/FreeFormGameBuilder.java:63:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/GUI.java:8:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/GUI.java:8:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/GUI.java:8:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/GUI.java:8:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/GUI.java:8:	ShortClassName:	ShortClassName: Avoid short class names like GUI
src/main/java/application/GUI.java:8:	ShortClassName:	ShortClassName: Avoid short class names like GUI
src/main/java/application/GUI.java:10:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the window field if you want a default access modifier
src/main/java/application/GUI.java:10:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the window field if you want a default access modifier
src/main/java/application/GUI.java:10:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/GUI.java:10:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/GUI.java:10:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/GUI.java:10:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/GUI.java:12:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/GUI.java:12:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/GUI.java:12:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the mainScene field if you want a default access modifier
src/main/java/application/GUI.java:12:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the mainScene field if you want a default access modifier
src/main/java/application/GUI.java:12:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/GUI.java:12:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/GUI.java:12:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/GUI.java:12:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/GUI.java:13:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/GUI.java:13:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/GUI.java:13:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the mainmenu field if you want a default access modifier
src/main/java/application/GUI.java:13:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the mainmenu field if you want a default access modifier
src/main/java/application/GUI.java:13:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/GUI.java:13:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/GUI.java:13:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/GUI.java:13:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/GUI.java:14:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the mainPane field if you want a default access modifier
src/main/java/application/GUI.java:14:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the mainPane field if you want a default access modifier
src/main/java/application/GUI.java:14:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/GUI.java:14:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/GUI.java:14:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/GUI.java:14:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/GUI.java:18:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/GUI.java:18:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/GUI.java:50:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/GUI.java:50:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/GUI.java:51:	ShortVariable:	ShortVariable: Avoid variables with short names like c
src/main/java/application/GUI.java:51:	ShortVariable:	ShortVariable: Avoid variables with short names like c
src/main/java/application/GUI.java:54:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/application/GUI.java:54:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/application/GUI.java:57:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/GUI.java:57:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/GUI.java:61:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/GUI.java:61:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/GUIStarter.java:3:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/GUIStarter.java:3:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/GUIStarter.java:5:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/GUIStarter.java:5:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:21:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/MainMenu.java:21:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/MainMenu.java:21:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/MainMenu.java:21:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/MainMenu.java:24:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:24:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:24:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:24:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:25:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:25:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:25:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:25:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:26:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:26:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:26:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:26:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:27:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:27:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:27:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:27:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:28:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:28:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:28:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:28:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:28:	SingularField:	SingularField: Perhaps 'gameModeButtons' could be replaced by a local variable.
src/main/java/application/MainMenu.java:28:	SingularField:	SingularField: Perhaps 'gameModeButtons' could be replaced by a local variable.
src/main/java/application/MainMenu.java:29:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:29:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:29:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:29:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:31:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:31:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:31:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:31:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:32:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:32:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:32:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:32:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:32:	SingularField:	SingularField: Perhaps 'difficultyButtons' could be replaced by a local variable.
src/main/java/application/MainMenu.java:32:	SingularField:	SingularField: Perhaps 'difficultyButtons' could be replaced by a local variable.
src/main/java/application/MainMenu.java:33:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:33:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:33:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:33:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:34:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:34:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:34:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:34:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:35:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:35:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:35:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:35:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:36:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:36:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:36:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:36:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:37:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:37:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:37:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:37:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:38:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:38:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:38:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:38:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:39:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:39:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:39:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:39:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:41:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:41:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:41:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:41:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:42:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:42:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:42:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:42:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:43:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:43:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:43:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:43:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:45:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:45:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:45:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:45:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:46:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:46:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:46:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:46:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:47:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:47:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:47:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:47:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:47:	ImmutableField:	ImmutableField: Private field 'fontSizeButtons' could be made final; it is only initialized in the declaration or constructor.
src/main/java/application/MainMenu.java:47:	ImmutableField:	ImmutableField: Private field 'fontSizeButtons' could be made final; it is only initialized in the declaration or constructor.
src/main/java/application/MainMenu.java:48:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:48:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:48:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:48:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:48:	ImmutableField:	ImmutableField: Private field 'fontSizeLabel' could be made final; it is only initialized in the declaration or constructor.
src/main/java/application/MainMenu.java:48:	ImmutableField:	ImmutableField: Private field 'fontSizeLabel' could be made final; it is only initialized in the declaration or constructor.
src/main/java/application/MainMenu.java:50:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:50:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:50:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the welcomeLabel field if you want a default access modifier
src/main/java/application/MainMenu.java:50:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the welcomeLabel field if you want a default access modifier
src/main/java/application/MainMenu.java:50:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:50:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:50:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/MainMenu.java:50:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/MainMenu.java:51:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:51:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:51:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the controllerMainMenu field if you want a default access modifier
src/main/java/application/MainMenu.java:51:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the controllerMainMenu field if you want a default access modifier
src/main/java/application/MainMenu.java:51:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:51:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:51:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/MainMenu.java:51:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/MainMenu.java:53:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:53:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:53:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the mainScene field if you want a default access modifier
src/main/java/application/MainMenu.java:53:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the mainScene field if you want a default access modifier
src/main/java/application/MainMenu.java:53:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:53:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:53:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/MainMenu.java:53:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/MainMenu.java:55:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:55:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/MainMenu.java:55:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the pane field if you want a default access modifier
src/main/java/application/MainMenu.java:55:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the pane field if you want a default access modifier
src/main/java/application/MainMenu.java:55:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:55:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/MainMenu.java:55:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/MainMenu.java:55:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/MainMenu.java:58:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:58:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:70:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/application/MainMenu.java:70:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/application/MainMenu.java:89:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:89:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:115:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:115:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:143:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:143:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:155:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:155:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:168:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/main/java/application/MainMenu.java:168:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/main/java/application/MainMenu.java:175:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:175:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:212:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:212:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:216:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:216:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:224:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:224:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:228:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/MainMenu.java:228:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/NewGamePopUp.java:8:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.control.ToggleButton'
src/main/java/application/NewGamePopUp.java:8:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.control.ToggleButton'
src/main/java/application/NewGamePopUp.java:13:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/NewGamePopUp.java:13:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/NewGamePopUp.java:13:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/NewGamePopUp.java:13:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/NewGamePopUp.java:15:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the game field if you want a default access modifier
src/main/java/application/NewGamePopUp.java:15:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the game field if you want a default access modifier
src/main/java/application/NewGamePopUp.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/NewGamePopUp.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/NewGamePopUp.java:15:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/NewGamePopUp.java:15:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/NewGamePopUp.java:16:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/main/java/application/NewGamePopUp.java:16:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/main/java/application/NewGamePopUp.java:16:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/NewGamePopUp.java:16:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/NewGamePopUp.java:16:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/NewGamePopUp.java:16:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/NewGamePopUp.java:20:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/NewGamePopUp.java:20:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/NewGamePopUp.java:20:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the popOver field if you want a default access modifier
src/main/java/application/NewGamePopUp.java:20:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the popOver field if you want a default access modifier
src/main/java/application/NewGamePopUp.java:20:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/NewGamePopUp.java:20:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/NewGamePopUp.java:20:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/NewGamePopUp.java:20:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/NewGamePopUp.java:23:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/NewGamePopUp.java:23:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/RulesStage.java:9:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/RulesStage.java:9:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/RulesStage.java:9:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/RulesStage.java:9:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/RulesStage.java:11:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/RulesStage.java:11:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SamuraiGameBuilder.java:4:	UnusedImports:	UnusedImports: Unused import 'javafx.css.PseudoClass'
src/main/java/application/SamuraiGameBuilder.java:4:	UnusedImports:	UnusedImports: Unused import 'javafx.css.PseudoClass'
src/main/java/application/SamuraiGameBuilder.java:7:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.Node'
src/main/java/application/SamuraiGameBuilder.java:7:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.Node'
src/main/java/application/SamuraiGameBuilder.java:10:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.text.Font'
src/main/java/application/SamuraiGameBuilder.java:10:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.text.Font'
src/main/java/application/SamuraiGameBuilder.java:11:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.text.FontWeight'
src/main/java/application/SamuraiGameBuilder.java:11:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.text.FontWeight'
src/main/java/application/SamuraiGameBuilder.java:20:	GodClass:	GodClass: Possible God Class (WMC=50, ATFD=13, TCC=0.000%)
src/main/java/application/SamuraiGameBuilder.java:20:	GodClass:	GodClass: Possible God Class (WMC=50, ATFD=13, TCC=0.000%)
src/main/java/application/SamuraiGameBuilder.java:22:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SamuraiGameBuilder.java:22:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SamuraiGameBuilder.java:45:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/SamuraiGameBuilder.java:45:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/SamuraiGameBuilder.java:51:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/SamuraiGameBuilder.java:51:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/SamuraiGameBuilder.java:52:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/SamuraiGameBuilder.java:52:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/SamuraiGameBuilder.java:92:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SamuraiGameBuilder.java:92:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SamuraiGameBuilder.java:92:	NPathComplexity:	NPathComplexity: The method 'drawColors()' has an NPath complexity of 1034, current threshold is 200
src/main/java/application/SamuraiGameBuilder.java:92:	NPathComplexity:	NPathComplexity: The method 'drawColors()' has an NPath complexity of 1034, current threshold is 200
src/main/java/application/SamuraiGameBuilder.java:95:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:95:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:95:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:95:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:95:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:95:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:96:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:96:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:96:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:96:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:96:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:96:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:106:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:106:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:106:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:106:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:107:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:107:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:107:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:107:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:107:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:107:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:110:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:110:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:110:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/SamuraiGameBuilder.java:110:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/application/Storage.java:13:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.control.Button'
src/main/java/application/Storage.java:13:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.control.Button'
src/main/java/application/Storage.java:27:	UnusedImports:	UnusedImports: Unused import 'logic.SudokuStorageModel'
src/main/java/application/Storage.java:27:	UnusedImports:	UnusedImports: Unused import 'logic.SudokuStorageModel'
src/main/java/application/Storage.java:29:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/Storage.java:29:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/application/Storage.java:29:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/Storage.java:29:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/Storage.java:34:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:34:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:35:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:35:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:37:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:37:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:37:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the controller field if you want a default access modifier
src/main/java/application/Storage.java:37:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the controller field if you want a default access modifier
src/main/java/application/Storage.java:37:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:37:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:37:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:37:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:42:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:42:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:42:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:42:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:43:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:43:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:43:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:43:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:47:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:47:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:47:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:47:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:50:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:50:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:50:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the contextMenu field if you want a default access modifier
src/main/java/application/Storage.java:50:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the contextMenu field if you want a default access modifier
src/main/java/application/Storage.java:50:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:50:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:50:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:50:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:51:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:51:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:51:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the deleteMenuItem field if you want a default access modifier
src/main/java/application/Storage.java:51:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the deleteMenuItem field if you want a default access modifier
src/main/java/application/Storage.java:51:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:51:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:51:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:51:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:52:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:52:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:52:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the loadMenuItem field if you want a default access modifier
src/main/java/application/Storage.java:52:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the loadMenuItem field if you want a default access modifier
src/main/java/application/Storage.java:52:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:52:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:52:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:52:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:55:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:55:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:55:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:55:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:56:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:56:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:56:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:56:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:58:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:58:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:58:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:58:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:61:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:61:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:61:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:61:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:62:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:62:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:62:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:62:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:63:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:63:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:63:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:63:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:64:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:64:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:64:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:64:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:65:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:65:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:65:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:65:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:66:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:66:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:66:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:66:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:67:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:67:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:67:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:67:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:68:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:68:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:68:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:68:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:70:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:70:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:70:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:70:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:72:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:72:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:72:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the fontAwesome field if you want a default access modifier
src/main/java/application/Storage.java:72:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the fontAwesome field if you want a default access modifier
src/main/java/application/Storage.java:72:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:72:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:72:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:72:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:73:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the folderGraphic field if you want a default access modifier
src/main/java/application/Storage.java:73:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the folderGraphic field if you want a default access modifier
src/main/java/application/Storage.java:73:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:73:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:73:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:73:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/Storage.java:76:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:76:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/Storage.java:76:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:76:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/Storage.java:81:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/Storage.java:81:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/Storage.java:98:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/Storage.java:98:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/Storage.java:147:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/Storage.java:147:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/Storage.java:226:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/Storage.java:226:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/Storage.java:244:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/Storage.java:244:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:7:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.paint.Color'
src/main/java/application/SudokuField.java:7:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.paint.Color'
src/main/java/application/SudokuField.java:9:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/SudokuField.java:9:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/application/SudokuField.java:11:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/SudokuField.java:11:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/SudokuField.java:12:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/SudokuField.java:12:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/SudokuField.java:14:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/SudokuField.java:14:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/application/SudokuField.java:14:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the freeFormColorListener field if you want a default access modifier
src/main/java/application/SudokuField.java:14:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the freeFormColorListener field if you want a default access modifier
src/main/java/application/SudokuField.java:14:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/SudokuField.java:14:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/application/SudokuField.java:14:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/SudokuField.java:14:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/application/SudokuField.java:18:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:18:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:21:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: Overridable method 'onlyOneNumber' called during object construction
src/main/java/application/SudokuField.java:21:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: Overridable method 'onlyOneNumber' called during object construction
src/main/java/application/SudokuField.java:22:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: Overridable method 'enterPressed' called during object construction
src/main/java/application/SudokuField.java:22:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: Overridable method 'enterPressed' called during object construction
src/main/java/application/SudokuField.java:23:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: Overridable method 'updateColor' called during object construction
src/main/java/application/SudokuField.java:23:	ConstructorCallsOverridableMethod:	ConstructorCallsOverridableMethod: Overridable method 'updateColor' called during object construction
src/main/java/application/SudokuField.java:35:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:35:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:37:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/application/SudokuField.java:37:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/application/SudokuField.java:38:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/application/SudokuField.java:38:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/application/SudokuField.java:42:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:42:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:45:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/application/SudokuField.java:45:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/application/SudokuField.java:51:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:51:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:55:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:55:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:72:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:72:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:77:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/application/SudokuField.java:77:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/application/SudokuField.java:84:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:84:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuField.java:103:	BooleanGetMethodName:	BooleanGetMethodName: A getX() method which returns a boolean should be named isX()
src/main/java/application/SudokuField.java:103:	BooleanGetMethodName:	BooleanGetMethodName: A getX() method which returns a boolean should be named isX()
src/main/java/application/SudokuGameBuilder.java:8:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.text.Font'
src/main/java/application/SudokuGameBuilder.java:8:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.text.Font'
src/main/java/application/SudokuGameBuilder.java:9:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.text.FontWeight'
src/main/java/application/SudokuGameBuilder.java:9:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.text.FontWeight'
src/main/java/application/SudokuGameBuilder.java:20:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuGameBuilder.java:20:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/application/SudokuGameBuilder.java:36:	MissingOverride:	MissingOverride: The method 'createBoard()' is missing an @Override annotation.
src/main/java/application/SudokuGameBuilder.java:36:	MissingOverride:	MissingOverride: The method 'createBoard()' is missing an @Override annotation.
src/main/java/application/SudokuGameBuilder.java:47:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/SudokuGameBuilder.java:47:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/application/SudokuGameBuilder.java:88:	MissingOverride:	MissingOverride: The method 'getTextField()' is missing an @Override annotation.
src/main/java/application/SudokuGameBuilder.java:88:	MissingOverride:	MissingOverride: The method 'getTextField()' is missing an @Override annotation.
src/main/java/controller/GameController.java:13:	UnusedImports:	UnusedImports: Unused import 'javafx.beans.property.IntegerProperty'
src/main/java/controller/GameController.java:13:	UnusedImports:	UnusedImports: Unused import 'javafx.beans.property.IntegerProperty'
src/main/java/controller/GameController.java:14:	UnusedImports:	UnusedImports: Unused import 'javafx.beans.property.SimpleIntegerProperty'
src/main/java/controller/GameController.java:14:	UnusedImports:	UnusedImports: Unused import 'javafx.beans.property.SimpleIntegerProperty'
src/main/java/controller/GameController.java:21:	UnusedImports:	UnusedImports: Unused import 'logic.Timer'
src/main/java/controller/GameController.java:21:	UnusedImports:	UnusedImports: Unused import 'logic.Timer'
src/main/java/controller/GameController.java:23:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/controller/GameController.java:23:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/controller/GameController.java:23:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The class 'GameController' has a Modified Cyclomatic Complexity of 4 (Highest = 12).
src/main/java/controller/GameController.java:23:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The class 'GameController' has a Modified Cyclomatic Complexity of 4 (Highest = 12).
src/main/java/controller/GameController.java:23:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/controller/GameController.java:23:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/controller/GameController.java:25:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/GameController.java:25:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/GameController.java:25:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the scene field if you want a default access modifier
src/main/java/controller/GameController.java:25:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the scene field if you want a default access modifier
src/main/java/controller/GameController.java:25:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/GameController.java:25:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/GameController.java:25:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/GameController.java:25:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/GameController.java:26:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/GameController.java:26:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/GameController.java:26:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/main/java/controller/GameController.java:26:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/main/java/controller/GameController.java:26:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/GameController.java:26:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/GameController.java:26:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/GameController.java:26:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/GameController.java:27:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/GameController.java:27:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/GameController.java:27:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the sudokuField field if you want a default access modifier
src/main/java/controller/GameController.java:27:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the sudokuField field if you want a default access modifier
src/main/java/controller/GameController.java:27:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/GameController.java:27:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/GameController.java:27:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/GameController.java:27:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/GameController.java:28:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the numberCounter field if you want a default access modifier
src/main/java/controller/GameController.java:28:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the numberCounter field if you want a default access modifier
src/main/java/controller/GameController.java:28:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/GameController.java:28:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/GameController.java:28:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/GameController.java:28:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/GameController.java:28:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'numberCounter'
src/main/java/controller/GameController.java:28:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'numberCounter'
src/main/java/controller/GameController.java:30:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:30:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:41:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:41:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:71:	PositionLiteralsFirstInComparisons:	PositionLiteralsFirstInComparisons: Position literals first in String comparisons
src/main/java/controller/GameController.java:71:	PositionLiteralsFirstInComparisons:	PositionLiteralsFirstInComparisons: Position literals first in String comparisons
src/main/java/controller/GameController.java:89:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:89:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:90:	ForLoopCanBeForeach:	ForLoopCanBeForeach: This for loop can be replaced by a foreach loop
src/main/java/controller/GameController.java:90:	ForLoopCanBeForeach:	ForLoopCanBeForeach: This for loop can be replaced by a foreach loop
src/main/java/controller/GameController.java:105:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:105:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:117:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:117:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:130:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:130:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:147:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:147:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:183:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:183:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:216:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/controller/GameController.java:216:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/controller/GameController.java:220:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:220:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:235:	ConfusingTernary:	ConfusingTernary: Avoid if (x != y) ..; else ..;
src/main/java/controller/GameController.java:235:	ConfusingTernary:	ConfusingTernary: Avoid if (x != y) ..; else ..;
src/main/java/controller/GameController.java:261:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/controller/GameController.java:261:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/controller/GameController.java:287:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:287:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:327:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:327:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:332:	ForLoopCanBeForeach:	ForLoopCanBeForeach: This for loop can be replaced by a foreach loop
src/main/java/controller/GameController.java:332:	ForLoopCanBeForeach:	ForLoopCanBeForeach: This for loop can be replaced by a foreach loop
src/main/java/controller/GameController.java:358:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:358:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:379:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:379:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:382:	ConfusingTernary:	ConfusingTernary: Avoid if (x != y) ..; else ..;
src/main/java/controller/GameController.java:382:	ConfusingTernary:	ConfusingTernary: Avoid if (x != y) ..; else ..;
src/main/java/controller/GameController.java:392:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:392:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:392:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'hintHandeler' has a Modified Cyclomatic Complexity of 12.
src/main/java/controller/GameController.java:392:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'hintHandeler' has a Modified Cyclomatic Complexity of 12.
src/main/java/controller/GameController.java:392:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:392:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:398:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:398:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:406:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/controller/GameController.java:406:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/controller/GameController.java:420:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:420:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:441:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:441:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:441:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:441:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:443:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:443:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:445:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:445:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/GameController.java:449:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:449:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:449:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:449:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:455:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:455:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:455:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:455:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:460:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/controller/GameController.java:460:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/controller/GameController.java:473:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:473:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:473:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:473:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:493:	ShortVariable:	ShortVariable: Avoid variables with short names like s
src/main/java/controller/GameController.java:493:	ShortVariable:	ShortVariable: Avoid variables with short names like s
src/main/java/controller/GameController.java:514:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:514:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:514:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:514:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:527:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:527:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:527:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:527:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/GameController.java:539:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:539:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/GameController.java:540:	ForLoopCanBeForeach:	ForLoopCanBeForeach: This for loop can be replaced by a foreach loop
src/main/java/controller/GameController.java:540:	ForLoopCanBeForeach:	ForLoopCanBeForeach: This for loop can be replaced by a foreach loop
src/main/java/controller/ModeController.java:13:	UnusedImports:	UnusedImports: Unused import 'javafx.beans.binding.Bindings'
src/main/java/controller/ModeController.java:13:	UnusedImports:	UnusedImports: Unused import 'javafx.beans.binding.Bindings'
src/main/java/controller/ModeController.java:29:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/controller/ModeController.java:29:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/controller/ModeController.java:31:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/ModeController.java:31:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/ModeController.java:31:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/ModeController.java:31:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/ModeController.java:31:	ImmutableField:	ImmutableField: Private field 'menu' could be made final; it is only initialized in the declaration or constructor.
src/main/java/controller/ModeController.java:31:	ImmutableField:	ImmutableField: Private field 'menu' could be made final; it is only initialized in the declaration or constructor.
src/main/java/controller/ModeController.java:32:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/ModeController.java:32:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/ModeController.java:32:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/ModeController.java:32:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/ModeController.java:33:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/ModeController.java:33:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/ModeController.java:33:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/ModeController.java:33:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/ModeController.java:35:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/ModeController.java:35:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/ModeController.java:35:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/ModeController.java:35:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/ModeController.java:37:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:37:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:48:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:48:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:60:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:60:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:72:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:72:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:84:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:84:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:93:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:93:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:101:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:101:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:108:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:108:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:108:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:108:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:117:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:117:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:117:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:117:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:124:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:124:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:124:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:124:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:126:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/ModeController.java:126:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/ModeController.java:151:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:151:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/ModeController.java:183:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:183:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:190:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:190:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:197:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:197:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:201:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/ModeController.java:201:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:3:	UnusedImports:	UnusedImports: Unused import 'application.BasicGameBuilder'
src/main/java/controller/PopOverController.java:3:	UnusedImports:	UnusedImports: Unused import 'application.BasicGameBuilder'
src/main/java/controller/PopOverController.java:6:	UnusedImports:	UnusedImports: Unused import 'application.SamuraiGameBuilder'
src/main/java/controller/PopOverController.java:6:	UnusedImports:	UnusedImports: Unused import 'application.SamuraiGameBuilder'
src/main/java/controller/PopOverController.java:7:	UnusedImports:	UnusedImports: Unused import 'application.SudokuGameBuilder'
src/main/java/controller/PopOverController.java:7:	UnusedImports:	UnusedImports: Unused import 'application.SudokuGameBuilder'
src/main/java/controller/PopOverController.java:9:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.Scene'
src/main/java/controller/PopOverController.java:9:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.Scene'
src/main/java/controller/PopOverController.java:10:	UnusedImports:	UnusedImports: Unused import 'logic.BasicGameLogic'
src/main/java/controller/PopOverController.java:10:	UnusedImports:	UnusedImports: Unused import 'logic.BasicGameLogic'
src/main/java/controller/PopOverController.java:11:	UnusedImports:	UnusedImports: Unused import 'logic.Gamestate'
src/main/java/controller/PopOverController.java:11:	UnusedImports:	UnusedImports: Unused import 'logic.Gamestate'
src/main/java/controller/PopOverController.java:12:	UnusedImports:	UnusedImports: Unused import 'logic.SamuraiLogic'
src/main/java/controller/PopOverController.java:12:	UnusedImports:	UnusedImports: Unused import 'logic.SamuraiLogic'
src/main/java/controller/PopOverController.java:13:	UnusedImports:	UnusedImports: Unused import 'logic.SudokuLogic'
src/main/java/controller/PopOverController.java:13:	UnusedImports:	UnusedImports: Unused import 'logic.SudokuLogic'
src/main/java/controller/PopOverController.java:15:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/controller/PopOverController.java:15:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/controller/PopOverController.java:17:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:17:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:24:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:24:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:24:	MissingOverride:	MissingOverride: The method 'handleHard(ActionEvent)' is missing an @Override annotation.
src/main/java/controller/PopOverController.java:24:	MissingOverride:	MissingOverride: The method 'handleHard(ActionEvent)' is missing an @Override annotation.
src/main/java/controller/PopOverController.java:24:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/PopOverController.java:24:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/PopOverController.java:30:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:30:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:30:	MissingOverride:	MissingOverride: The method 'handleEasy(ActionEvent)' is missing an @Override annotation.
src/main/java/controller/PopOverController.java:30:	MissingOverride:	MissingOverride: The method 'handleEasy(ActionEvent)' is missing an @Override annotation.
src/main/java/controller/PopOverController.java:30:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/PopOverController.java:30:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/PopOverController.java:36:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:36:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:36:	MissingOverride:	MissingOverride: The method 'handleMedium(ActionEvent)' is missing an @Override annotation.
src/main/java/controller/PopOverController.java:36:	MissingOverride:	MissingOverride: The method 'handleMedium(ActionEvent)' is missing an @Override annotation.
src/main/java/controller/PopOverController.java:36:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/PopOverController.java:36:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/PopOverController.java:42:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:42:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:42:	MissingOverride:	MissingOverride: The method 'handleManual(ActionEvent)' is missing an @Override annotation.
src/main/java/controller/PopOverController.java:42:	MissingOverride:	MissingOverride: The method 'handleManual(ActionEvent)' is missing an @Override annotation.
src/main/java/controller/PopOverController.java:42:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/PopOverController.java:42:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/PopOverController.java:48:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/PopOverController.java:48:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:19:	UnusedImports:	UnusedImports: Unused import 'javafx.beans.property.SimpleIntegerProperty'
src/main/java/controller/StorageController.java:19:	UnusedImports:	UnusedImports: Unused import 'javafx.beans.property.SimpleIntegerProperty'
src/main/java/controller/StorageController.java:30:	UnusedImports:	UnusedImports: Unused import 'logic.SamuraiLogic'
src/main/java/controller/StorageController.java:30:	UnusedImports:	UnusedImports: Unused import 'logic.SamuraiLogic'
src/main/java/controller/StorageController.java:32:	UnusedImports:	UnusedImports: Unused import 'logic.SudokuLogic'
src/main/java/controller/StorageController.java:32:	UnusedImports:	UnusedImports: Unused import 'logic.SudokuLogic'
src/main/java/controller/StorageController.java:35:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/controller/StorageController.java:35:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/controller/StorageController.java:35:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The class 'StorageController' has a Modified Cyclomatic Complexity of 4 (Highest = 11).
src/main/java/controller/StorageController.java:35:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The class 'StorageController' has a Modified Cyclomatic Complexity of 4 (Highest = 11).
src/main/java/controller/StorageController.java:37:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the playScene field if you want a default access modifier
src/main/java/controller/StorageController.java:37:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the playScene field if you want a default access modifier
src/main/java/controller/StorageController.java:37:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:37:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:37:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:37:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:38:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:38:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:38:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the game field if you want a default access modifier
src/main/java/controller/StorageController.java:38:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the game field if you want a default access modifier
src/main/java/controller/StorageController.java:38:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:38:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:38:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:38:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:39:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:39:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:39:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/main/java/controller/StorageController.java:39:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/main/java/controller/StorageController.java:39:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:39:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:39:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:39:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:41:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the gameIdentifier field if you want a default access modifier
src/main/java/controller/StorageController.java:41:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the gameIdentifier field if you want a default access modifier
src/main/java/controller/StorageController.java:41:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:41:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:41:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:41:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:42:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:42:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:42:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the storageModel field if you want a default access modifier
src/main/java/controller/StorageController.java:42:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the storageModel field if you want a default access modifier
src/main/java/controller/StorageController.java:42:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:42:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:42:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:42:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:44:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the gameScene field if you want a default access modifier
src/main/java/controller/StorageController.java:44:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the gameScene field if you want a default access modifier
src/main/java/controller/StorageController.java:44:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:44:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:44:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:44:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:45:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:45:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:45:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the storage field if you want a default access modifier
src/main/java/controller/StorageController.java:45:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the storage field if you want a default access modifier
src/main/java/controller/StorageController.java:45:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:45:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:45:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:45:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:46:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the path field if you want a default access modifier
src/main/java/controller/StorageController.java:46:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the path field if you want a default access modifier
src/main/java/controller/StorageController.java:46:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:46:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:46:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:46:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:48:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:48:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:48:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the dir field if you want a default access modifier
src/main/java/controller/StorageController.java:48:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the dir field if you want a default access modifier
src/main/java/controller/StorageController.java:48:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:48:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:48:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:48:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:50:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:50:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:50:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:50:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:52:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:52:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:52:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the gameTypecolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:52:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the gameTypecolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:52:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:52:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:52:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:52:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:53:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:53:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:53:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the difficultycolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:53:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the difficultycolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:53:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:53:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:53:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:53:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:54:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:54:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:54:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the pointscolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:54:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the pointscolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:54:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:54:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:54:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:54:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:55:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:55:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:55:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the playtimecolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:55:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the playtimecolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:55:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:55:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:55:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:55:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:56:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:56:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:56:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the gamestatecolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:56:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the gamestatecolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:56:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:56:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:56:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:56:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:57:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:57:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:57:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the gameidcolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:57:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the gameidcolumn field if you want a default access modifier
src/main/java/controller/StorageController.java:57:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:57:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:57:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:57:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:59:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the overallPointsProperty field if you want a default access modifier
src/main/java/controller/StorageController.java:59:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the overallPointsProperty field if you want a default access modifier
src/main/java/controller/StorageController.java:59:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:59:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:59:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:59:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:61:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:61:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/controller/StorageController.java:61:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the sharedStorage field if you want a default access modifier
src/main/java/controller/StorageController.java:61:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the sharedStorage field if you want a default access modifier
src/main/java/controller/StorageController.java:61:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:61:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/controller/StorageController.java:61:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:61:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/controller/StorageController.java:63:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:63:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:73:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:73:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:73:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'handleLoadAction' has a Modified Cyclomatic Complexity of 11.
src/main/java/controller/StorageController.java:73:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'handleLoadAction' has a Modified Cyclomatic Complexity of 11.
src/main/java/controller/StorageController.java:73:	NPathComplexity:	NPathComplexity: The method 'handleLoadAction(ActionEvent)' has an NPath complexity of 672, current threshold is 200
src/main/java/controller/StorageController.java:73:	NPathComplexity:	NPathComplexity: The method 'handleLoadAction(ActionEvent)' has an NPath complexity of 672, current threshold is 200
src/main/java/controller/StorageController.java:73:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/StorageController.java:73:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/StorageController.java:111:	ShortVariable:	ShortVariable: Avoid variables with short names like s
src/main/java/controller/StorageController.java:111:	ShortVariable:	ShortVariable: Avoid variables with short names like s
src/main/java/controller/StorageController.java:118:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/controller/StorageController.java:118:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/controller/StorageController.java:123:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/controller/StorageController.java:123:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/controller/StorageController.java:131:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:131:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:137:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:137:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:166:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:166:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:166:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/StorageController.java:166:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/StorageController.java:173:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/controller/StorageController.java:173:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/controller/StorageController.java:180:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:180:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:180:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/StorageController.java:180:	ShortVariable:	ShortVariable: Avoid variables with short names like e
src/main/java/controller/StorageController.java:193:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:193:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/controller/StorageController.java:213:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/StorageController.java:213:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/StorageController.java:239:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/controller/StorageController.java:239:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/BasicGameLogic.java:8:	UnusedImports:	UnusedImports: Unused import 'javafx.beans.binding.Bindings'
src/main/java/logic/BasicGameLogic.java:8:	UnusedImports:	UnusedImports: Unused import 'javafx.beans.binding.Bindings'
src/main/java/logic/BasicGameLogic.java:21:	AbstractNaming:	AbstractNaming: Abstract classes should be named AbstractXXX
src/main/java/logic/BasicGameLogic.java:21:	AbstractNaming:	AbstractNaming: Abstract classes should be named AbstractXXX
src/main/java/logic/BasicGameLogic.java:21:	DataClass:	DataClass: The class 'BasicGameLogic' is suspected to be a Data Class (WOC=24.242%, NOPA=1, NOAM=25, WMC=45)
src/main/java/logic/BasicGameLogic.java:21:	DataClass:	DataClass: The class 'BasicGameLogic' is suspected to be a Data Class (WOC=24.242%, NOPA=1, NOAM=25, WMC=45)
src/main/java/logic/BasicGameLogic.java:21:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/logic/BasicGameLogic.java:21:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/logic/BasicGameLogic.java:23:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:23:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:23:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:23:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:24:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:24:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:24:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:24:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:25:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:25:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:26:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:26:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:26:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:26:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:27:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:27:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:27:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:27:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:28:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:28:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:28:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:28:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:30:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:30:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:31:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:31:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:32:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:32:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:32:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:32:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:33:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:33:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:33:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:33:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:33:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'gameID'
src/main/java/logic/BasicGameLogic.java:33:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'gameID'
src/main/java/logic/BasicGameLogic.java:35:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:35:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:37:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:37:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:37:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:37:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:39:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:39:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:39:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:39:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:43:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:43:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:44:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:44:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:44:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:44:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:44:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'countHintsPressed'
src/main/java/logic/BasicGameLogic.java:44:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'countHintsPressed'
src/main/java/logic/BasicGameLogic.java:46:	AvoidFieldNameMatchingMethodName:	AvoidFieldNameMatchingMethodName: Field difficulty has the same name as a method
src/main/java/logic/BasicGameLogic.java:46:	AvoidFieldNameMatchingMethodName:	AvoidFieldNameMatchingMethodName: Field difficulty has the same name as a method
src/main/java/logic/BasicGameLogic.java:46:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:46:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:48:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:48:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:48:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:48:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:51:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:51:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:51:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the timer field if you want a default access modifier
src/main/java/logic/BasicGameLogic.java:51:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the timer field if you want a default access modifier
src/main/java/logic/BasicGameLogic.java:51:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:51:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:51:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/BasicGameLogic.java:51:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/BasicGameLogic.java:52:	AvoidFieldNameMatchingMethodName:	AvoidFieldNameMatchingMethodName: Field timerIsRunning has the same name as a method
src/main/java/logic/BasicGameLogic.java:52:	AvoidFieldNameMatchingMethodName:	AvoidFieldNameMatchingMethodName: Field timerIsRunning has the same name as a method
src/main/java/logic/BasicGameLogic.java:52:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:52:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/BasicGameLogic.java:52:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the timerIsRunning field if you want a default access modifier
src/main/java/logic/BasicGameLogic.java:52:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the timerIsRunning field if you want a default access modifier
src/main/java/logic/BasicGameLogic.java:52:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:52:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:52:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/BasicGameLogic.java:52:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/BasicGameLogic.java:54:	CommentRequired:	CommentRequired: Protected method constructor comments are required
src/main/java/logic/BasicGameLogic.java:54:	CommentRequired:	CommentRequired: Protected method constructor comments are required
src/main/java/logic/BasicGameLogic.java:63:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:63:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:65:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:65:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:67:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:67:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:69:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:69:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:71:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:71:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:73:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:73:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:75:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:75:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:77:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:77:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:79:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:79:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:81:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:81:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:83:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:83:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:90:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:90:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:101:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:101:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:135:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:135:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:142:	MethodReturnsInternalArray:	MethodReturnsInternalArray: Returning 'cells' may expose an internal array.
src/main/java/logic/BasicGameLogic.java:142:	MethodReturnsInternalArray:	MethodReturnsInternalArray: Returning 'cells' may expose an internal array.
src/main/java/logic/BasicGameLogic.java:145:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/logic/BasicGameLogic.java:145:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/logic/BasicGameLogic.java:197:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:197:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:201:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:201:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:254:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:254:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:255:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/BasicGameLogic.java:255:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/BasicGameLogic.java:258:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/BasicGameLogic.java:258:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/BasicGameLogic.java:261:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/BasicGameLogic.java:261:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/BasicGameLogic.java:271:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:271:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:279:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the helpmin field if you want a default access modifier
src/main/java/logic/BasicGameLogic.java:279:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the helpmin field if you want a default access modifier
src/main/java/logic/BasicGameLogic.java:279:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:279:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:280:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the helpsec field if you want a default access modifier
src/main/java/logic/BasicGameLogic.java:280:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the helpsec field if you want a default access modifier
src/main/java/logic/BasicGameLogic.java:280:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:280:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:282:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:282:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/BasicGameLogic.java:287:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/logic/BasicGameLogic.java:287:	UselessParentheses:	UselessParentheses: Useless parentheses.
src/main/java/logic/BasicGameLogic.java:310:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:310:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:319:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:319:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:322:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/BasicGameLogic.java:322:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/Cell.java:3:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.paint.Color'
src/main/java/logic/Cell.java:3:	UnusedImports:	UnusedImports: Unused import 'javafx.scene.paint.Color'
src/main/java/logic/Cell.java:5:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/Cell.java:5:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/Cell.java:5:	DataClass:	DataClass: The class 'Cell' is suspected to be a Data Class (WOC=7.143%, NOPA=0, NOAM=12, WMC=14)
src/main/java/logic/Cell.java:5:	DataClass:	DataClass: The class 'Cell' is suspected to be a Data Class (WOC=7.143%, NOPA=0, NOAM=12, WMC=14)
src/main/java/logic/Cell.java:5:	ShortClassName:	ShortClassName: Avoid short class names like Cell
src/main/java/logic/Cell.java:5:	ShortClassName:	ShortClassName: Avoid short class names like Cell
src/main/java/logic/Cell.java:8:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the col field if you want a default access modifier
src/main/java/logic/Cell.java:8:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the col field if you want a default access modifier
src/main/java/logic/Cell.java:8:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:8:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:8:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:8:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:11:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the row field if you want a default access modifier
src/main/java/logic/Cell.java:11:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the row field if you want a default access modifier
src/main/java/logic/Cell.java:11:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:11:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:11:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:11:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:14:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the box field if you want a default access modifier
src/main/java/logic/Cell.java:14:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the box field if you want a default access modifier
src/main/java/logic/Cell.java:14:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:14:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:14:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:14:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:17:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the value field if you want a default access modifier
src/main/java/logic/Cell.java:17:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the value field if you want a default access modifier
src/main/java/logic/Cell.java:17:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:17:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:17:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:17:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:20:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the isReal field if you want a default access modifier
src/main/java/logic/Cell.java:20:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the isReal field if you want a default access modifier
src/main/java/logic/Cell.java:20:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:20:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:20:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:20:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:23:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the boxcolor field if you want a default access modifier
src/main/java/logic/Cell.java:23:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the boxcolor field if you want a default access modifier
src/main/java/logic/Cell.java:23:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:23:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/Cell.java:23:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:23:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/Cell.java:25:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/Cell.java:25:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/Cell.java:35:	BooleanGetMethodName:	BooleanGetMethodName: A getX() method which returns a boolean should be named isX()
src/main/java/logic/Cell.java:35:	BooleanGetMethodName:	BooleanGetMethodName: A getX() method which returns a boolean should be named isX()
src/main/java/logic/FreeFormLogic.java:3:	UnusedImports:	UnusedImports: Unused import 'application.SudokuField'
src/main/java/logic/FreeFormLogic.java:3:	UnusedImports:	UnusedImports: Unused import 'application.SudokuField'
src/main/java/logic/FreeFormLogic.java:5:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/FreeFormLogic.java:5:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/FreeFormLogic.java:5:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The class 'FreeFormLogic' has a Modified Cyclomatic Complexity of 5 (Highest = 24).
src/main/java/logic/FreeFormLogic.java:5:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The class 'FreeFormLogic' has a Modified Cyclomatic Complexity of 5 (Highest = 24).
src/main/java/logic/FreeFormLogic.java:5:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/logic/FreeFormLogic.java:5:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/logic/FreeFormLogic.java:7:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/FreeFormLogic.java:7:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/FreeFormLogic.java:8:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the counter field if you want a default access modifier
src/main/java/logic/FreeFormLogic.java:8:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the counter field if you want a default access modifier
src/main/java/logic/FreeFormLogic.java:8:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/FreeFormLogic.java:8:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/FreeFormLogic.java:8:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/FreeFormLogic.java:8:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/FreeFormLogic.java:8:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'counter'
src/main/java/logic/FreeFormLogic.java:8:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'counter'
src/main/java/logic/FreeFormLogic.java:10:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:10:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:17:	MissingOverride:	MissingOverride: The method 'getCells()' is missing an @Override annotation.
src/main/java/logic/FreeFormLogic.java:17:	MissingOverride:	MissingOverride: The method 'getCells()' is missing an @Override annotation.
src/main/java/logic/FreeFormLogic.java:18:	MethodReturnsInternalArray:	MethodReturnsInternalArray: Returning 'cells' may expose an internal array.
src/main/java/logic/FreeFormLogic.java:18:	MethodReturnsInternalArray:	MethodReturnsInternalArray: Returning 'cells' may expose an internal array.
src/main/java/logic/FreeFormLogic.java:21:	MissingOverride:	MissingOverride: The method 'setCells(Cell)' is missing an @Override annotation.
src/main/java/logic/FreeFormLogic.java:21:	MissingOverride:	MissingOverride: The method 'setCells(Cell)' is missing an @Override annotation.
src/main/java/logic/FreeFormLogic.java:21:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/logic/FreeFormLogic.java:21:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/logic/FreeFormLogic.java:30:	SimplifyBooleanReturns:	SimplifyBooleanReturns: Avoid unnecessary if..then..else statements when returning booleans
src/main/java/logic/FreeFormLogic.java:30:	SimplifyBooleanReturns:	SimplifyBooleanReturns: Avoid unnecessary if..then..else statements when returning booleans
src/main/java/logic/FreeFormLogic.java:31:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:31:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:72:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:72:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:73:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:73:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:85:	MissingOverride:	MissingOverride: The method 'createSudoku()' is missing an @Override annotation.
src/main/java/logic/FreeFormLogic.java:85:	MissingOverride:	MissingOverride: The method 'createSudoku()' is missing an @Override annotation.
src/main/java/logic/FreeFormLogic.java:91:	ShortVariable:	ShortVariable: Avoid variables with short names like a
src/main/java/logic/FreeFormLogic.java:91:	ShortVariable:	ShortVariable: Avoid variables with short names like a
src/main/java/logic/FreeFormLogic.java:95:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:95:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:101:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:101:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:105:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/FreeFormLogic.java:105:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/FreeFormLogic.java:109:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:109:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:112:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/FreeFormLogic.java:112:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/FreeFormLogic.java:114:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/FreeFormLogic.java:114:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/FreeFormLogic.java:130:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:130:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:136:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:136:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:140:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/FreeFormLogic.java:140:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/FreeFormLogic.java:152:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'hint' has a Modified Cyclomatic Complexity of 11.
src/main/java/logic/FreeFormLogic.java:152:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'hint' has a Modified Cyclomatic Complexity of 11.
src/main/java/logic/FreeFormLogic.java:152:	NPathComplexity:	NPathComplexity: The method 'hint()' has an NPath complexity of 297, current threshold is 200
src/main/java/logic/FreeFormLogic.java:152:	NPathComplexity:	NPathComplexity: The method 'hint()' has an NPath complexity of 297, current threshold is 200
src/main/java/logic/FreeFormLogic.java:179:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:179:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:182:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:182:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:183:	AvoidReassigningLoopVariables:	AvoidReassigningLoopVariables: Avoid reassigning the loop control variable 'row'
src/main/java/logic/FreeFormLogic.java:183:	AvoidReassigningLoopVariables:	AvoidReassigningLoopVariables: Avoid reassigning the loop control variable 'row'
src/main/java/logic/FreeFormLogic.java:187:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:187:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:203:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'setUpLogicArray' has a Modified Cyclomatic Complexity of 12.
src/main/java/logic/FreeFormLogic.java:203:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'setUpLogicArray' has a Modified Cyclomatic Complexity of 12.
src/main/java/logic/FreeFormLogic.java:229:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/FreeFormLogic.java:229:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/FreeFormLogic.java:253:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:253:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:253:	MissingOverride:	MissingOverride: The method 'setCell(int, int, int)' is missing an @Override annotation.
src/main/java/logic/FreeFormLogic.java:253:	MissingOverride:	MissingOverride: The method 'setCell(int, int, int)' is missing an @Override annotation.
src/main/java/logic/FreeFormLogic.java:258:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:258:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:258:	MissingOverride:	MissingOverride: The method 'printCells()' is missing an @Override annotation.
src/main/java/logic/FreeFormLogic.java:258:	MissingOverride:	MissingOverride: The method 'printCells()' is missing an @Override annotation.
src/main/java/logic/FreeFormLogic.java:261:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/FreeFormLogic.java:261:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/FreeFormLogic.java:263:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/FreeFormLogic.java:263:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/FreeFormLogic.java:266:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/FreeFormLogic.java:266:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/FreeFormLogic.java:268:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/FreeFormLogic.java:268:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/FreeFormLogic.java:291:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:291:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:305:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'shuffle' has a Modified Cyclomatic Complexity of 24.
src/main/java/logic/FreeFormLogic.java:305:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'shuffle' has a Modified Cyclomatic Complexity of 24.
src/main/java/logic/FreeFormLogic.java:305:	NPathComplexity:	NPathComplexity: The method 'shuffle()' has an NPath complexity of 2028, current threshold is 200
src/main/java/logic/FreeFormLogic.java:305:	NPathComplexity:	NPathComplexity: The method 'shuffle()' has an NPath complexity of 2028, current threshold is 200
src/main/java/logic/FreeFormLogic.java:305:	NcssCount:	NcssCount: The method 'shuffle()' has a NCSS line count of 60.
src/main/java/logic/FreeFormLogic.java:305:	NcssCount:	NcssCount: The method 'shuffle()' has a NCSS line count of 60.
src/main/java/logic/FreeFormLogic.java:310:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/FreeFormLogic.java:310:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/FreeFormLogic.java:321:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:321:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:335:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:335:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:336:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/FreeFormLogic.java:336:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/FreeFormLogic.java:347:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:347:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:363:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:363:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:365:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:365:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:367:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:367:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:369:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:369:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:371:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:371:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:373:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:373:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:375:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:375:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:377:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:377:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:379:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:379:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:386:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:386:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:399:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:399:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:406:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:406:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:418:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:418:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:422:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:422:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:429:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:429:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:429:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'proofEdgesAndSetNewBox' has a Modified Cyclomatic Complexity of 13.
src/main/java/logic/FreeFormLogic.java:429:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'proofEdgesAndSetNewBox' has a Modified Cyclomatic Complexity of 13.
src/main/java/logic/FreeFormLogic.java:429:	NPathComplexity:	NPathComplexity: The method 'proofEdgesAndSetNewBox(int, int)' has an NPath complexity of 625, current threshold is 200
src/main/java/logic/FreeFormLogic.java:429:	NPathComplexity:	NPathComplexity: The method 'proofEdgesAndSetNewBox(int, int)' has an NPath complexity of 625, current threshold is 200
src/main/java/logic/FreeFormLogic.java:429:	ShortVariable:	ShortVariable: Avoid variables with short names like i
src/main/java/logic/FreeFormLogic.java:429:	ShortVariable:	ShortVariable: Avoid variables with short names like i
src/main/java/logic/FreeFormLogic.java:429:	ShortVariable:	ShortVariable: Avoid variables with short names like j
src/main/java/logic/FreeFormLogic.java:429:	ShortVariable:	ShortVariable: Avoid variables with short names like j
src/main/java/logic/FreeFormLogic.java:438:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:438:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:442:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:442:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:448:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:448:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:454:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:454:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:458:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:458:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:464:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:464:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:470:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:470:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:474:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:474:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:480:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:480:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:486:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:486:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:490:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:490:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/FreeFormLogic.java:496:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:496:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:521:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:521:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:522:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:522:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/FreeFormLogic.java:532:	LinguisticNaming:	LinguisticNaming: Linguistics Antipattern - The method 'isInternalConnected' indicates linguistically it returns a boolean, but it returns 'int'
src/main/java/logic/FreeFormLogic.java:532:	LinguisticNaming:	LinguisticNaming: Linguistics Antipattern - The method 'isInternalConnected' indicates linguistically it returns a boolean, but it returns 'int'
src/main/java/logic/FreeFormLogic.java:532:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'isInternalConnected' has a Modified Cyclomatic Complexity of 13.
src/main/java/logic/FreeFormLogic.java:532:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'isInternalConnected' has a Modified Cyclomatic Complexity of 13.
src/main/java/logic/FreeFormLogic.java:532:	NPathComplexity:	NPathComplexity: The method 'isInternalConnected(int, int, int, int)' has an NPath complexity of 256, current threshold is 200
src/main/java/logic/FreeFormLogic.java:532:	NPathComplexity:	NPathComplexity: The method 'isInternalConnected(int, int, int, int)' has an NPath complexity of 256, current threshold is 200
src/main/java/logic/FreeFormLogic.java:532:	ShortVariable:	ShortVariable: Avoid variables with short names like i
src/main/java/logic/FreeFormLogic.java:532:	ShortVariable:	ShortVariable: Avoid variables with short names like i
src/main/java/logic/FreeFormLogic.java:532:	ShortVariable:	ShortVariable: Avoid variables with short names like j
src/main/java/logic/FreeFormLogic.java:532:	ShortVariable:	ShortVariable: Avoid variables with short names like j
src/main/java/logic/FreeFormLogic.java:532:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/logic/FreeFormLogic.java:532:	UseVarargs:	UseVarargs: Consider using varargs for methods or constructors which take an array the last parameter.
src/main/java/logic/FreeFormLogic.java:533:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:533:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:534:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:534:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:535:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:535:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:537:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'toNine'
src/main/java/logic/FreeFormLogic.java:537:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'toNine'
src/main/java/logic/FreeFormLogic.java:542:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:542:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:543:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:543:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:549:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:549:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/FreeFormLogic.java:550:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:550:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:551:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:551:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:558:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:558:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:559:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:559:	CollapsibleIfStatements:	CollapsibleIfStatements: These nested if statements could be combined
src/main/java/logic/FreeFormLogic.java:568:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/FreeFormLogic.java:568:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/Gamestate.java:3:	CommentRequired:	CommentRequired: Enum comments are required
src/main/java/logic/Gamestate.java:3:	CommentRequired:	CommentRequired: Enum comments are required
src/main/java/logic/SamuraiLogic.java:3:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/SamuraiLogic.java:3:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/SamuraiLogic.java:3:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The class 'SamuraiLogic' has a Modified Cyclomatic Complexity of 7 (Highest = 28).
src/main/java/logic/SamuraiLogic.java:3:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The class 'SamuraiLogic' has a Modified Cyclomatic Complexity of 7 (Highest = 28).
src/main/java/logic/SamuraiLogic.java:3:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/logic/SamuraiLogic.java:3:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/logic/SamuraiLogic.java:5:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SamuraiLogic.java:5:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SamuraiLogic.java:13:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'checkRow' has a Modified Cyclomatic Complexity of 28.
src/main/java/logic/SamuraiLogic.java:13:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'checkRow' has a Modified Cyclomatic Complexity of 28.
src/main/java/logic/SamuraiLogic.java:17:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'col'
src/main/java/logic/SamuraiLogic.java:17:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'col'
src/main/java/logic/SamuraiLogic.java:19:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:19:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:25:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:25:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:35:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:35:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:41:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:41:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:51:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:51:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:57:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:57:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:67:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:67:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:73:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:73:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:81:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:81:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:90:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'checkCol' has a Modified Cyclomatic Complexity of 28.
src/main/java/logic/SamuraiLogic.java:90:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'checkCol' has a Modified Cyclomatic Complexity of 28.
src/main/java/logic/SamuraiLogic.java:93:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'row'
src/main/java/logic/SamuraiLogic.java:93:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'row'
src/main/java/logic/SamuraiLogic.java:95:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:95:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:101:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:101:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:111:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:111:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:117:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:117:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:127:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:127:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:133:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:133:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:143:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:143:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:149:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:149:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:157:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:157:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:235:	ShortVariable:	ShortVariable: Avoid variables with short names like r
src/main/java/logic/SamuraiLogic.java:235:	ShortVariable:	ShortVariable: Avoid variables with short names like r
src/main/java/logic/SamuraiLogic.java:236:	ShortVariable:	ShortVariable: Avoid variables with short names like c
src/main/java/logic/SamuraiLogic.java:236:	ShortVariable:	ShortVariable: Avoid variables with short names like c
src/main/java/logic/SamuraiLogic.java:238:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'row'
src/main/java/logic/SamuraiLogic.java:238:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'row'
src/main/java/logic/SamuraiLogic.java:239:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'col'
src/main/java/logic/SamuraiLogic.java:239:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'col'
src/main/java/logic/SamuraiLogic.java:241:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:241:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:252:	SimplifyBooleanReturns:	SimplifyBooleanReturns: Avoid unnecessary if..then..else statements when returning booleans
src/main/java/logic/SamuraiLogic.java:252:	SimplifyBooleanReturns:	SimplifyBooleanReturns: Avoid unnecessary if..then..else statements when returning booleans
src/main/java/logic/SamuraiLogic.java:253:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:253:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:265:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SamuraiLogic.java:265:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SamuraiLogic.java:268:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SamuraiLogic.java:268:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SamuraiLogic.java:271:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SamuraiLogic.java:271:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SamuraiLogic.java:274:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SamuraiLogic.java:274:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SamuraiLogic.java:277:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SamuraiLogic.java:277:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SamuraiLogic.java:291:	ShortVariable:	ShortVariable: Avoid variables with short names like a
src/main/java/logic/SamuraiLogic.java:291:	ShortVariable:	ShortVariable: Avoid variables with short names like a
src/main/java/logic/SamuraiLogic.java:295:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:295:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:301:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:301:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:336:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SamuraiLogic.java:336:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SamuraiLogic.java:337:	NullAssignment:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
src/main/java/logic/SamuraiLogic.java:337:	NullAssignment:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
src/main/java/logic/SamuraiLogic.java:470:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SamuraiLogic.java:470:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SamuraiLogic.java:470:	MissingOverride:	MissingOverride: The method 'solveSudoku()' is missing an @Override annotation.
src/main/java/logic/SamuraiLogic.java:470:	MissingOverride:	MissingOverride: The method 'solveSudoku()' is missing an @Override annotation.
src/main/java/logic/SamuraiLogic.java:486:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/SamuraiLogic.java:486:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/SamuraiLogic.java:491:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/SamuraiLogic.java:491:	SimplifyBooleanExpressions:	SimplifyBooleanExpressions: Avoid unnecessary comparisons in boolean expressions
src/main/java/logic/SamuraiLogic.java:492:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:492:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:505:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:505:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:513:	EmptyStatementNotInLoop:	EmptyStatementNotInLoop: An empty statement (semicolon) not part of a loop
src/main/java/logic/SamuraiLogic.java:513:	EmptyStatementNotInLoop:	EmptyStatementNotInLoop: An empty statement (semicolon) not part of a loop
src/main/java/logic/SamuraiLogic.java:521:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'difficulty' has a Modified Cyclomatic Complexity of 10.
src/main/java/logic/SamuraiLogic.java:521:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'difficulty' has a Modified Cyclomatic Complexity of 10.
src/main/java/logic/SamuraiLogic.java:521:	NPathComplexity:	NPathComplexity: The method 'difficulty()' has an NPath complexity of 200, current threshold is 200
src/main/java/logic/SamuraiLogic.java:521:	NPathComplexity:	NPathComplexity: The method 'difficulty()' has an NPath complexity of 200, current threshold is 200
src/main/java/logic/SamuraiLogic.java:523:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SamuraiLogic.java:523:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SamuraiLogic.java:524:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SamuraiLogic.java:524:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SamuraiLogic.java:525:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SamuraiLogic.java:525:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SamuraiLogic.java:526:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SamuraiLogic.java:526:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SamuraiLogic.java:527:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SamuraiLogic.java:527:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SamuraiLogic.java:528:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SamuraiLogic.java:528:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SamuraiLogic.java:530:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SamuraiLogic.java:530:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SamuraiLogic.java:558:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/SamuraiLogic.java:558:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/SamuraiLogic.java:560:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/SamuraiLogic.java:560:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/SamuraiLogic.java:563:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/SamuraiLogic.java:563:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/SamuraiLogic.java:593:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SamuraiLogic.java:593:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SharedStoragePreferences.java:5:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/logic/SharedStoragePreferences.java:5:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/logic/SharedStoragePreferences.java:5:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/SharedStoragePreferences.java:5:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/SharedStoragePreferences.java:7:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the sudokuSaveCounter field if you want a default access modifier
src/main/java/logic/SharedStoragePreferences.java:7:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the sudokuSaveCounter field if you want a default access modifier
src/main/java/logic/SharedStoragePreferences.java:7:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SharedStoragePreferences.java:7:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SharedStoragePreferences.java:7:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SharedStoragePreferences.java:7:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SharedStoragePreferences.java:7:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'sudokuSaveCounter'
src/main/java/logic/SharedStoragePreferences.java:7:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'sudokuSaveCounter'
src/main/java/logic/SharedStoragePreferences.java:8:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the samuraiSaveCounter field if you want a default access modifier
src/main/java/logic/SharedStoragePreferences.java:8:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the samuraiSaveCounter field if you want a default access modifier
src/main/java/logic/SharedStoragePreferences.java:8:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SharedStoragePreferences.java:8:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SharedStoragePreferences.java:8:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SharedStoragePreferences.java:8:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SharedStoragePreferences.java:8:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'samuraiSaveCounter'
src/main/java/logic/SharedStoragePreferences.java:8:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'samuraiSaveCounter'
src/main/java/logic/SharedStoragePreferences.java:9:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the freeFormSaveCounter field if you want a default access modifier
src/main/java/logic/SharedStoragePreferences.java:9:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the freeFormSaveCounter field if you want a default access modifier
src/main/java/logic/SharedStoragePreferences.java:9:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SharedStoragePreferences.java:9:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SharedStoragePreferences.java:9:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SharedStoragePreferences.java:9:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SharedStoragePreferences.java:9:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'freeFormSaveCounter'
src/main/java/logic/SharedStoragePreferences.java:9:	RedundantFieldInitializer:	RedundantFieldInitializer: Avoid using redundant field initializer for 'freeFormSaveCounter'
src/main/java/logic/SharedStoragePreferences.java:11:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SharedStoragePreferences.java:11:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SharedStoragePreferences.java:13:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SharedStoragePreferences.java:13:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SharedStoragePreferences.java:13:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the prefs field if you want a default access modifier
src/main/java/logic/SharedStoragePreferences.java:13:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the prefs field if you want a default access modifier
src/main/java/logic/SharedStoragePreferences.java:13:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SharedStoragePreferences.java:13:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SharedStoragePreferences.java:13:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SharedStoragePreferences.java:13:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SharedStoragePreferences.java:15:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SharedStoragePreferences.java:15:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SharedStoragePreferences.java:19:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SharedStoragePreferences.java:19:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SharedStoragePreferences.java:23:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SharedStoragePreferences.java:23:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuLogic.java:3:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/SudokuLogic.java:3:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/SudokuLogic.java:3:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The class 'SudokuLogic' has a Modified Cyclomatic Complexity of 4 (Highest = 12).
src/main/java/logic/SudokuLogic.java:3:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The class 'SudokuLogic' has a Modified Cyclomatic Complexity of 4 (Highest = 12).
src/main/java/logic/SudokuLogic.java:3:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/logic/SudokuLogic.java:3:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/main/java/logic/SudokuLogic.java:5:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuLogic.java:5:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuLogic.java:17:	SimplifyBooleanReturns:	SimplifyBooleanReturns: Avoid unnecessary if..then..else statements when returning booleans
src/main/java/logic/SudokuLogic.java:17:	SimplifyBooleanReturns:	SimplifyBooleanReturns: Avoid unnecessary if..then..else statements when returning booleans
src/main/java/logic/SudokuLogic.java:18:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:18:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:28:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'col'
src/main/java/logic/SudokuLogic.java:28:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'col'
src/main/java/logic/SudokuLogic.java:30:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:30:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:41:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'row'
src/main/java/logic/SudokuLogic.java:41:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'row'
src/main/java/logic/SudokuLogic.java:43:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:43:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:55:	ShortVariable:	ShortVariable: Avoid variables with short names like r
src/main/java/logic/SudokuLogic.java:55:	ShortVariable:	ShortVariable: Avoid variables with short names like r
src/main/java/logic/SudokuLogic.java:56:	ShortVariable:	ShortVariable: Avoid variables with short names like c
src/main/java/logic/SudokuLogic.java:56:	ShortVariable:	ShortVariable: Avoid variables with short names like c
src/main/java/logic/SudokuLogic.java:61:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:61:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:72:	MissingOverride:	MissingOverride: The method 'createSudoku()' is missing an @Override annotation.
src/main/java/logic/SudokuLogic.java:72:	MissingOverride:	MissingOverride: The method 'createSudoku()' is missing an @Override annotation.
src/main/java/logic/SudokuLogic.java:77:	ShortVariable:	ShortVariable: Avoid variables with short names like a
src/main/java/logic/SudokuLogic.java:77:	ShortVariable:	ShortVariable: Avoid variables with short names like a
src/main/java/logic/SudokuLogic.java:81:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:81:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:87:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:87:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:106:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:106:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:112:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:112:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:206:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SudokuLogic.java:206:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SudokuLogic.java:207:	NullAssignment:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
src/main/java/logic/SudokuLogic.java:207:	NullAssignment:	NullAssignment: Assigning an Object to null is a code smell.  Consider refactoring.
src/main/java/logic/SudokuLogic.java:223:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'setUpLogicArray' has a Modified Cyclomatic Complexity of 12.
src/main/java/logic/SudokuLogic.java:223:	ModifiedCyclomaticComplexity:	ModifiedCyclomaticComplexity: The method 'setUpLogicArray' has a Modified Cyclomatic Complexity of 12.
src/main/java/logic/SudokuLogic.java:246:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SudokuLogic.java:246:	AvoidInstantiatingObjectsInLoops:	AvoidInstantiatingObjectsInLoops: Avoid instantiating new objects inside loops
src/main/java/logic/SudokuLogic.java:256:	MissingOverride:	MissingOverride: The method 'difficulty()' is missing an @Override annotation.
src/main/java/logic/SudokuLogic.java:256:	MissingOverride:	MissingOverride: The method 'difficulty()' is missing an @Override annotation.
src/main/java/logic/SudokuLogic.java:258:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SudokuLogic.java:258:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SudokuLogic.java:259:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuLogic.java:259:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuLogic.java:260:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SudokuLogic.java:260:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SudokuLogic.java:261:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuLogic.java:261:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuLogic.java:262:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SudokuLogic.java:262:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SudokuLogic.java:263:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuLogic.java:263:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuLogic.java:265:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SudokuLogic.java:265:	AvoidLiteralsInIfCondition:	AvoidLiteralsInIfCondition: Avoid using Literals in Conditional Statements
src/main/java/logic/SudokuLogic.java:285:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuLogic.java:285:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuLogic.java:285:	MissingOverride:	MissingOverride: The method 'setCell(int, int, int)' is missing an @Override annotation.
src/main/java/logic/SudokuLogic.java:285:	MissingOverride:	MissingOverride: The method 'setCell(int, int, int)' is missing an @Override annotation.
src/main/java/logic/SudokuLogic.java:290:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuLogic.java:290:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuLogic.java:290:	MissingOverride:	MissingOverride: The method 'printCells()' is missing an @Override annotation.
src/main/java/logic/SudokuLogic.java:290:	MissingOverride:	MissingOverride: The method 'printCells()' is missing an @Override annotation.
src/main/java/logic/SudokuLogic.java:293:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/SudokuLogic.java:293:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/SudokuLogic.java:295:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/SudokuLogic.java:295:	SystemPrintln:	SystemPrintln: System.out.print is used
src/main/java/logic/SudokuLogic.java:298:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/SudokuLogic.java:298:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/SudokuLogic.java:300:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/SudokuLogic.java:300:	SystemPrintln:	SystemPrintln: System.out.println is used
src/main/java/logic/SudokuLogic.java:323:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuLogic.java:323:	OnlyOneReturn:	OnlyOneReturn: A method should have only one exit point, and that should be the last statement in the method
src/main/java/logic/SudokuStorageModel.java:20:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/logic/SudokuStorageModel.java:20:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/main/java/logic/SudokuStorageModel.java:20:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/SudokuStorageModel.java:20:	CommentRequired:	CommentRequired: Class comments are required
src/main/java/logic/SudokuStorageModel.java:22:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:22:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:22:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'savedModel'.
src/main/java/logic/SudokuStorageModel.java:22:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'savedModel'.
src/main/java/logic/SudokuStorageModel.java:23:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:23:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:23:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'saveCounter'.
src/main/java/logic/SudokuStorageModel.java:23:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'saveCounter'.
src/main/java/logic/SudokuStorageModel.java:26:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:26:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:26:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:26:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:28:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:28:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:28:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:28:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:29:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:29:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:29:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:29:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:30:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:30:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:30:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:30:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:31:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:31:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:31:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:31:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:32:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:32:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:32:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:32:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:33:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:33:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:33:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:33:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:34:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:34:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:34:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:34:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:35:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:35:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:35:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:35:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:36:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:36:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:36:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:36:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:36:	SingularField:	SingularField: Perhaps 'playTimeString' could be replaced by a local variable.
src/main/java/logic/SudokuStorageModel.java:36:	SingularField:	SingularField: Perhaps 'playTimeString' could be replaced by a local variable.
src/main/java/logic/SudokuStorageModel.java:36:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'playTimeString'.
src/main/java/logic/SudokuStorageModel.java:36:	UnusedPrivateField:	UnusedPrivateField: Avoid unused private fields such as 'playTimeString'.
src/main/java/logic/SudokuStorageModel.java:38:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:38:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:38:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:38:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:39:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:39:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:39:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:39:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:39:	SingularField:	SingularField: Perhaps 'helper' could be replaced by a local variable.
src/main/java/logic/SudokuStorageModel.java:39:	SingularField:	SingularField: Perhaps 'helper' could be replaced by a local variable.
src/main/java/logic/SudokuStorageModel.java:41:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:41:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:41:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the chooser field if you want a default access modifier
src/main/java/logic/SudokuStorageModel.java:41:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the chooser field if you want a default access modifier
src/main/java/logic/SudokuStorageModel.java:41:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:41:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:41:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SudokuStorageModel.java:41:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SudokuStorageModel.java:43:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:43:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/main/java/logic/SudokuStorageModel.java:43:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the storagePref field if you want a default access modifier
src/main/java/logic/SudokuStorageModel.java:43:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the storagePref field if you want a default access modifier
src/main/java/logic/SudokuStorageModel.java:43:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:43:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:43:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SudokuStorageModel.java:43:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SudokuStorageModel.java:45:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the saveDirectory field if you want a default access modifier
src/main/java/logic/SudokuStorageModel.java:45:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the saveDirectory field if you want a default access modifier
src/main/java/logic/SudokuStorageModel.java:45:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:45:	CommentRequired:	CommentRequired: Field comments are required
src/main/java/logic/SudokuStorageModel.java:45:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SudokuStorageModel.java:45:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/main/java/logic/SudokuStorageModel.java:47:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:47:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:65:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:65:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:96:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:96:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:104:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/main/java/logic/SudokuStorageModel.java:104:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/main/java/logic/SudokuStorageModel.java:108:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:108:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:119:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:119:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:133:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:133:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:133:	LinguisticNaming:	LinguisticNaming: Linguistics Antipattern - The setter 'setImportedFile' should not return any type except void linguistically
src/main/java/logic/SudokuStorageModel.java:133:	LinguisticNaming:	LinguisticNaming: Linguistics Antipattern - The setter 'setImportedFile' should not return any type except void linguistically
src/main/java/logic/SudokuStorageModel.java:135:	ShortVariable:	ShortVariable: Avoid variables with short names like g
src/main/java/logic/SudokuStorageModel.java:135:	ShortVariable:	ShortVariable: Avoid variables with short names like g
src/main/java/logic/SudokuStorageModel.java:142:	UnnecessaryLocalBeforeReturn:	UnnecessaryLocalBeforeReturn: Consider simply returning the value vs storing it in local variable 'importedJson'
src/main/java/logic/SudokuStorageModel.java:142:	UnnecessaryLocalBeforeReturn:	UnnecessaryLocalBeforeReturn: Consider simply returning the value vs storing it in local variable 'importedJson'
src/main/java/logic/SudokuStorageModel.java:147:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:147:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:149:	ShortVariable:	ShortVariable: Avoid variables with short names like g
src/main/java/logic/SudokuStorageModel.java:149:	ShortVariable:	ShortVariable: Avoid variables with short names like g
src/main/java/logic/SudokuStorageModel.java:166:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:166:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:167:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'model'
src/main/java/logic/SudokuStorageModel.java:167:	AvoidReassigningParameters:	AvoidReassigningParameters: Avoid reassigning parameters such as 'model'
src/main/java/logic/SudokuStorageModel.java:167:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuStorageModel.java:167:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuStorageModel.java:167:	PositionLiteralsFirstInComparisons:	PositionLiteralsFirstInComparisons: Position literals first in String comparisons
src/main/java/logic/SudokuStorageModel.java:167:	PositionLiteralsFirstInComparisons:	PositionLiteralsFirstInComparisons: Position literals first in String comparisons
src/main/java/logic/SudokuStorageModel.java:168:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuStorageModel.java:168:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuStorageModel.java:168:	PositionLiteralsFirstInComparisons:	PositionLiteralsFirstInComparisons: Position literals first in String comparisons
src/main/java/logic/SudokuStorageModel.java:168:	PositionLiteralsFirstInComparisons:	PositionLiteralsFirstInComparisons: Position literals first in String comparisons
src/main/java/logic/SudokuStorageModel.java:169:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuStorageModel.java:169:	ControlStatementBraces:	ControlStatementBraces: This statement should have braces
src/main/java/logic/SudokuStorageModel.java:169:	PositionLiteralsFirstInComparisons:	PositionLiteralsFirstInComparisons: Position literals first in String comparisons
src/main/java/logic/SudokuStorageModel.java:169:	PositionLiteralsFirstInComparisons:	PositionLiteralsFirstInComparisons: Position literals first in String comparisons
src/main/java/logic/SudokuStorageModel.java:183:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:183:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/main/java/logic/SudokuStorageModel.java:194:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/main/java/logic/SudokuStorageModel.java:194:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/main/java/logic/SudokuStorageModel.java:195:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'FileNotFoundException' branch
src/main/java/logic/SudokuStorageModel.java:195:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'FileNotFoundException' branch
src/main/java/logic/SudokuStorageModel.java:196:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/main/java/logic/SudokuStorageModel.java:196:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/main/java/logic/SudokuStorageModel.java:197:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'FileNotFoundException' branch
src/main/java/logic/SudokuStorageModel.java:197:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'FileNotFoundException' branch
src/main/java/logic/SudokuStorageModel.java:198:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/main/java/logic/SudokuStorageModel.java:198:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/main/java/logic/SudokuStorageModel.java:199:	AvoidCatchingGenericException:	AvoidCatchingGenericException: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
src/main/java/logic/SudokuStorageModel.java:199:	AvoidCatchingGenericException:	AvoidCatchingGenericException: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
src/main/java/logic/SudokuStorageModel.java:199:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'FileNotFoundException' branch
src/main/java/logic/SudokuStorageModel.java:199:	IdenticalCatchBranches:	IdenticalCatchBranches: 'catch' branch identical to 'FileNotFoundException' branch
src/main/java/logic/SudokuStorageModel.java:200:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/main/java/logic/SudokuStorageModel.java:200:	AvoidPrintStackTrace:	AvoidPrintStackTrace: Avoid printStackTrace(); use a logger call instead.
src/test/java/test/BasicGameLogicTest.java:1:	TooManyStaticImports:	TooManyStaticImports: Too many static imports may lead to messy code
src/test/java/test/BasicGameLogicTest.java:1:	TooManyStaticImports:	TooManyStaticImports: Too many static imports may lead to messy code
src/test/java/test/BasicGameLogicTest.java:5:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertFalse'
src/test/java/test/BasicGameLogicTest.java:5:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertFalse'
src/test/java/test/BasicGameLogicTest.java:6:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertTrue'
src/test/java/test/BasicGameLogicTest.java:6:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertTrue'
src/test/java/test/BasicGameLogicTest.java:7:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.Assertions.assertNotEquals'
src/test/java/test/BasicGameLogicTest.java:7:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.Assertions.assertNotEquals'
src/test/java/test/BasicGameLogicTest.java:17:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/BasicGameLogicTest.java:17:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/BasicGameLogicTest.java:17:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/BasicGameLogicTest.java:17:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/BasicGameLogicTest.java:17:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/test/java/test/BasicGameLogicTest.java:17:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/test/java/test/BasicGameLogicTest.java:19:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/BasicGameLogicTest.java:19:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/BasicGameLogicTest.java:19:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/test/java/test/BasicGameLogicTest.java:19:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/test/java/test/BasicGameLogicTest.java:19:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/BasicGameLogicTest.java:19:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/BasicGameLogicTest.java:19:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/BasicGameLogicTest.java:19:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/BasicGameLogicTest.java:22:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:22:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:28:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:28:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:33:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:33:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:37:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:37:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:38:	ShortVariable:	ShortVariable: Avoid variables with short names like a
src/test/java/test/BasicGameLogicTest.java:38:	ShortVariable:	ShortVariable: Avoid variables with short names like a
src/test/java/test/BasicGameLogicTest.java:39:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:39:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:44:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:44:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:46:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:46:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:50:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:50:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:52:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:52:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:79:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:79:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:81:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:81:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:84:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:84:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:86:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:86:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:90:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:90:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:92:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:92:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:95:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:95:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:97:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:97:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:101:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:101:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:102:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:102:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:105:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:105:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:107:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:107:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:112:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:112:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:115:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:115:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:118:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:118:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:121:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:121:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:124:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:124:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:127:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:127:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:130:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:130:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:133:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:133:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:137:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:137:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:139:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:139:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:142:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:142:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:144:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:144:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:148:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:148:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:150:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:150:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:153:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:153:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:155:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:155:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:159:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:159:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:161:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:161:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:164:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:164:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:166:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:166:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:170:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:170:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:170:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/BasicGameLogicTest.java:170:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/BasicGameLogicTest.java:174:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:174:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:176:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:176:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:178:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:178:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:180:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:180:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:182:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:182:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:186:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:186:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:188:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:188:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:191:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:191:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:192:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:192:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/BasicGameLogicTest.java:196:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:196:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/BasicGameLogicTest.java:196:	JUnitTestsShouldIncludeAssert:	JUnitTestsShouldIncludeAssert: JUnit tests should include assert() or fail()
src/test/java/test/BasicGameLogicTest.java:196:	JUnitTestsShouldIncludeAssert:	JUnitTestsShouldIncludeAssert: JUnit tests should include assert() or fail()
src/test/java/test/CellTest.java:6:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.Assertions.assertNotEquals'
src/test/java/test/CellTest.java:6:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.Assertions.assertNotEquals'
src/test/java/test/CellTest.java:13:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/CellTest.java:13:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/CellTest.java:13:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/CellTest.java:13:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/CellTest.java:13:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/test/java/test/CellTest.java:13:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/test/java/test/CellTest.java:15:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/CellTest.java:15:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/CellTest.java:15:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the cell field if you want a default access modifier
src/test/java/test/CellTest.java:15:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the cell field if you want a default access modifier
src/test/java/test/CellTest.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/CellTest.java:15:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/CellTest.java:15:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/CellTest.java:15:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/CellTest.java:18:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:18:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:24:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:24:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:25:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:25:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:29:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:29:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:30:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:30:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:34:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:34:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:35:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:35:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:39:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:39:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:40:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:40:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:44:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:44:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:45:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:45:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:51:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:51:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:53:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:53:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:57:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:57:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:59:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:59:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:63:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:63:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:65:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:65:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:69:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:69:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:71:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:71:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:75:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:75:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:77:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:77:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:81:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:81:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/CellTest.java:84:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/CellTest.java:84:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/GameControllerTest.java:3:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertEquals'
src/test/java/test/GameControllerTest.java:3:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertEquals'
src/test/java/test/GameControllerTest.java:4:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertTrue'
src/test/java/test/GameControllerTest.java:4:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertTrue'
src/test/java/test/GameControllerTest.java:6:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.BeforeEach'
src/test/java/test/GameControllerTest.java:6:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.BeforeEach'
src/test/java/test/GameControllerTest.java:7:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.Test'
src/test/java/test/GameControllerTest.java:7:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.Test'
src/test/java/test/GameControllerTest.java:9:	UnusedImports:	UnusedImports: Unused import 'application.MainMenu'
src/test/java/test/GameControllerTest.java:9:	UnusedImports:	UnusedImports: Unused import 'application.MainMenu'
src/test/java/test/GameControllerTest.java:10:	UnusedImports:	UnusedImports: Unused import 'javafx.application.Application'
src/test/java/test/GameControllerTest.java:10:	UnusedImports:	UnusedImports: Unused import 'javafx.application.Application'
src/test/java/test/GameControllerTest.java:11:	UnusedImports:	UnusedImports: Unused import 'javafx.stage.Stage'
src/test/java/test/GameControllerTest.java:11:	UnusedImports:	UnusedImports: Unused import 'javafx.stage.Stage'
src/test/java/test/GameControllerTest.java:12:	UnusedImports:	UnusedImports: Unused import 'logic.Gamestate'
src/test/java/test/GameControllerTest.java:12:	UnusedImports:	UnusedImports: Unused import 'logic.Gamestate'
src/test/java/test/GameControllerTest.java:13:	UnusedImports:	UnusedImports: Unused import 'logic.SamuraiLogic'
src/test/java/test/GameControllerTest.java:13:	UnusedImports:	UnusedImports: Unused import 'logic.SamuraiLogic'
src/test/java/test/GameControllerTest.java:14:	UnusedImports:	UnusedImports: Unused import 'logic.SudokuLogic'
src/test/java/test/GameControllerTest.java:14:	UnusedImports:	UnusedImports: Unused import 'logic.SudokuLogic'
src/test/java/test/GameControllerTest.java:16:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/GameControllerTest.java:16:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/GameControllerTest.java:16:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/GameControllerTest.java:16:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/SamuraiLogicTest.java:12:	UnusedImports:	UnusedImports: Unused import 'logic.Cell'
src/test/java/test/SamuraiLogicTest.java:12:	UnusedImports:	UnusedImports: Unused import 'logic.Cell'
src/test/java/test/SamuraiLogicTest.java:15:	UnusedImports:	UnusedImports: Unused import 'logic.SudokuLogic'
src/test/java/test/SamuraiLogicTest.java:15:	UnusedImports:	UnusedImports: Unused import 'logic.SudokuLogic'
src/test/java/test/SamuraiLogicTest.java:18:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/SamuraiLogicTest.java:18:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/SamuraiLogicTest.java:18:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/SamuraiLogicTest.java:18:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/SamuraiLogicTest.java:18:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/test/java/test/SamuraiLogicTest.java:18:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/test/java/test/SamuraiLogicTest.java:21:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/SamuraiLogicTest.java:21:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/SamuraiLogicTest.java:21:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:21:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:21:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/SamuraiLogicTest.java:21:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/SamuraiLogicTest.java:21:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/SamuraiLogicTest.java:21:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/SamuraiLogicTest.java:24:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:24:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:30:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:30:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:40:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:40:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:44:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:44:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:49:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:49:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:54:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:54:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:54:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:54:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:56:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:56:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:57:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:57:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:66:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowTopLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:66:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowTopLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:66:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:66:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:68:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:68:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:69:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:69:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:73:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowTopOverlappingLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:73:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowTopOverlappingLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:73:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:73:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:75:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:75:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:76:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:76:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:77:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:77:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:78:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:78:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:82:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowTopRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:82:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowTopRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:82:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:82:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:84:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:84:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:85:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:85:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:89:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowTopOverlappingRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:89:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowTopOverlappingRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:89:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:89:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:91:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:91:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:92:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:92:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:93:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:93:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:94:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:94:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:98:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowBottomLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:98:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowBottomLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:98:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:98:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:100:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:100:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:101:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:101:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:105:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowBottomOverlappingLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:105:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowBottomOverlappingLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:105:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:105:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:107:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:107:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:108:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:108:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:109:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:109:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:110:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:110:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:114:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowBottomRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:114:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowBottomRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:114:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:114:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:116:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:116:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:117:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:117:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:121:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowBottomOverlappingRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:121:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowBottomOverlappingRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:121:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:121:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:123:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:123:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:124:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:124:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:125:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:125:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:126:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:126:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:130:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowCenter method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:130:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestRowCenter method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:130:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:130:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:132:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:132:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:133:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:133:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:142:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColopLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:142:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColopLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:142:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:142:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:144:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:144:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:145:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:145:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:149:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColTopOverlappingLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:149:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColTopOverlappingLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:149:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:149:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:151:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:151:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:152:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:152:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:153:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:153:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:154:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:154:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:158:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColTopRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:158:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColTopRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:158:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:158:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:160:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:160:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:161:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:161:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:165:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColTopOverlappingRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:165:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColTopOverlappingRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:165:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:165:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:167:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:167:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:168:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:168:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:169:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:169:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:170:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:170:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:174:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColBottomLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:174:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColBottomLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:174:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:174:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:176:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:176:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:177:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:177:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:181:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColBottomOverlappingLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:181:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColBottomOverlappingLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:181:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:181:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:183:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:183:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:184:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:184:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:185:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:185:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:186:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:186:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:190:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColBottomRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:190:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColBottomRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:190:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:190:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:192:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:192:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:193:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:193:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:197:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColBottomOverlappingRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:197:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColBottomOverlappingRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:197:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:197:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:199:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:199:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:200:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:200:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:201:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:201:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:202:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:202:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:206:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColCenter method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:206:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestColCenter method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:206:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:206:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:208:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:208:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:209:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:209:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:216:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestBoxTopLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:216:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestBoxTopLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:216:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:216:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:218:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:218:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:219:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:219:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:223:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestBoxTopRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:223:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestBoxTopRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:223:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:223:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:225:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:225:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:226:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:226:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:230:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestBoxBottomLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:230:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestBoxBottomLeft method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:230:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:230:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:232:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:232:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:233:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:233:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:237:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestBoxBottomRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:237:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestBoxBottomRight method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:237:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:237:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:239:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:239:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:240:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:240:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:244:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestBoxCenter method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:244:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the TestBoxCenter method if you want a default access modifier
src/test/java/test/SamuraiLogicTest.java:244:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:244:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:246:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:246:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:247:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:247:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:257:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:257:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:257:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:257:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SamuraiLogicTest.java:258:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:258:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:261:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:261:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:262:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:262:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:263:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:263:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:267:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:267:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:278:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:278:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:282:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:282:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:293:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:293:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:297:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:297:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:308:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:308:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:312:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:312:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:323:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:323:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:327:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:327:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:338:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:338:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:342:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:342:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:343:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:343:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:348:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:348:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:360:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:360:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:366:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:366:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:378:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:378:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:382:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:382:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:394:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:394:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:398:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:398:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:402:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:402:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:406:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:406:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:406:	JUnitTestsShouldIncludeAssert:	JUnitTestsShouldIncludeAssert: JUnit tests should include assert() or fail()
src/test/java/test/SamuraiLogicTest.java:406:	JUnitTestsShouldIncludeAssert:	JUnitTestsShouldIncludeAssert: JUnit tests should include assert() or fail()
src/test/java/test/SamuraiLogicTest.java:411:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:411:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:413:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:413:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:417:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:417:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:420:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:420:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:425:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:425:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:430:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:430:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:434:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:434:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:438:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:438:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SamuraiLogicTest.java:443:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:443:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SamuraiLogicTest.java:444:	UseShortArrayInitializer:	UseShortArrayInitializer: Array initialization can be written shorter
src/test/java/test/SamuraiLogicTest.java:444:	UseShortArrayInitializer:	UseShortArrayInitializer: Array initialization can be written shorter
src/test/java/test/SamuraiLogicTest.java:451:	SystemPrintln:	SystemPrintln: System.out.println is used
src/test/java/test/SamuraiLogicTest.java:451:	SystemPrintln:	SystemPrintln: System.out.println is used
src/test/java/test/SharedStoragePreferencesTest.java:4:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertFalse'
src/test/java/test/SharedStoragePreferencesTest.java:4:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertFalse'
src/test/java/test/SharedStoragePreferencesTest.java:5:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertTrue'
src/test/java/test/SharedStoragePreferencesTest.java:5:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertTrue'
src/test/java/test/SharedStoragePreferencesTest.java:6:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.Assertions.assertNotEquals'
src/test/java/test/SharedStoragePreferencesTest.java:6:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.Assertions.assertNotEquals'
src/test/java/test/SharedStoragePreferencesTest.java:8:	UnusedImports:	UnusedImports: Unused import 'java.util.prefs.Preferences'
src/test/java/test/SharedStoragePreferencesTest.java:8:	UnusedImports:	UnusedImports: Unused import 'java.util.prefs.Preferences'
src/test/java/test/SharedStoragePreferencesTest.java:15:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/SharedStoragePreferencesTest.java:15:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/SharedStoragePreferencesTest.java:15:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/SharedStoragePreferencesTest.java:15:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/SharedStoragePreferencesTest.java:17:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/SharedStoragePreferencesTest.java:17:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/SharedStoragePreferencesTest.java:17:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the ssp field if you want a default access modifier
src/test/java/test/SharedStoragePreferencesTest.java:17:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the ssp field if you want a default access modifier
src/test/java/test/SharedStoragePreferencesTest.java:17:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/SharedStoragePreferencesTest.java:17:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/SharedStoragePreferencesTest.java:17:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/SharedStoragePreferencesTest.java:17:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/SharedStoragePreferencesTest.java:19:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SharedStoragePreferencesTest.java:19:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SharedStoragePreferencesTest.java:24:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SharedStoragePreferencesTest.java:24:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SharedStoragePreferencesTest.java:26:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SharedStoragePreferencesTest.java:26:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SharedStoragePreferencesTest.java:30:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SharedStoragePreferencesTest.java:30:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SharedStoragePreferencesTest.java:32:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SharedStoragePreferencesTest.java:32:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SharedStoragePreferencesTest.java:36:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SharedStoragePreferencesTest.java:36:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SharedStoragePreferencesTest.java:38:	SystemPrintln:	SystemPrintln: System.out.println is used
src/test/java/test/SharedStoragePreferencesTest.java:38:	SystemPrintln:	SystemPrintln: System.out.println is used
src/test/java/test/SharedStoragePreferencesTest.java:39:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SharedStoragePreferencesTest.java:39:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:11:	UnusedImports:	UnusedImports: Unused import 'logic.Cell'
src/test/java/test/SudokuLogicTest.java:11:	UnusedImports:	UnusedImports: Unused import 'logic.Cell'
src/test/java/test/SudokuLogicTest.java:16:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/SudokuLogicTest.java:16:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/SudokuLogicTest.java:16:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/SudokuLogicTest.java:16:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/SudokuLogicTest.java:16:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/test/java/test/SudokuLogicTest.java:16:	TooManyMethods:	TooManyMethods: This class has too many methods, consider refactoring it.
src/test/java/test/SudokuLogicTest.java:19:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/SudokuLogicTest.java:19:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/SudokuLogicTest.java:19:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/test/java/test/SudokuLogicTest.java:19:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/test/java/test/SudokuLogicTest.java:19:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/SudokuLogicTest.java:19:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/SudokuLogicTest.java:19:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/SudokuLogicTest.java:19:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/SudokuLogicTest.java:22:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:22:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:28:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:28:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:38:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:38:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:43:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:43:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:48:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:48:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:53:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:53:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:53:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SudokuLogicTest.java:53:	JUnitTestContainsTooManyAsserts:	JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s).
src/test/java/test/SudokuLogicTest.java:55:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:55:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:56:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:56:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:61:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:61:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:64:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:64:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:68:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:68:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:71:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:71:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:75:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:75:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:78:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:78:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:82:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:82:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:85:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:85:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:89:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:89:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:92:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:92:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:96:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:96:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:99:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:99:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:103:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:103:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:114:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:114:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:118:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:118:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:129:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:129:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:133:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:133:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:144:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:144:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:148:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:148:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:159:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:159:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:163:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:163:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:174:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:174:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:178:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:178:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:179:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:179:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:183:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:183:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:195:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:195:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:199:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:199:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:211:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:211:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:215:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:215:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:227:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:227:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:231:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:231:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:235:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:235:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:239:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:239:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:239:	JUnitTestsShouldIncludeAssert:	JUnitTestsShouldIncludeAssert: JUnit tests should include assert() or fail()
src/test/java/test/SudokuLogicTest.java:239:	JUnitTestsShouldIncludeAssert:	JUnitTestsShouldIncludeAssert: JUnit tests should include assert() or fail()
src/test/java/test/SudokuLogicTest.java:244:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:244:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:246:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:246:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:251:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:251:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:254:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:254:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:259:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:259:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:264:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:264:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:268:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:268:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:272:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:272:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:277:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:277:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:278:	UseShortArrayInitializer:	UseShortArrayInitializer: Array initialization can be written shorter
src/test/java/test/SudokuLogicTest.java:278:	UseShortArrayInitializer:	UseShortArrayInitializer: Array initialization can be written shorter
src/test/java/test/SudokuLogicTest.java:285:	SystemPrintln:	SystemPrintln: System.out.println is used
src/test/java/test/SudokuLogicTest.java:285:	SystemPrintln:	SystemPrintln: System.out.println is used
src/test/java/test/SudokuLogicTest.java:290:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:290:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuLogicTest.java:291:	UseShortArrayInitializer:	UseShortArrayInitializer: Array initialization can be written shorter
src/test/java/test/SudokuLogicTest.java:291:	UseShortArrayInitializer:	UseShortArrayInitializer: Array initialization can be written shorter
src/test/java/test/SudokuLogicTest.java:298:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuLogicTest.java:298:	JUnitAssertionsShouldIncludeMessage:	JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message
src/test/java/test/SudokuStorageModelTest.java:3:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertEquals'
src/test/java/test/SudokuStorageModelTest.java:3:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertEquals'
src/test/java/test/SudokuStorageModelTest.java:4:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertFalse'
src/test/java/test/SudokuStorageModelTest.java:4:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertFalse'
src/test/java/test/SudokuStorageModelTest.java:5:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertTrue'
src/test/java/test/SudokuStorageModelTest.java:5:	UnusedImports:	UnusedImports: Unused import 'org.junit.Assert.assertTrue'
src/test/java/test/SudokuStorageModelTest.java:6:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.Assertions.assertNotEquals'
src/test/java/test/SudokuStorageModelTest.java:6:	UnusedImports:	UnusedImports: Unused import 'org.junit.jupiter.api.Assertions.assertNotEquals'
src/test/java/test/SudokuStorageModelTest.java:8:	UnusedImports:	UnusedImports: Unused import 'java.util.prefs.Preferences'
src/test/java/test/SudokuStorageModelTest.java:8:	UnusedImports:	UnusedImports: Unused import 'java.util.prefs.Preferences'
src/test/java/test/SudokuStorageModelTest.java:15:	UnusedImports:	UnusedImports: Unused import 'logic.SamuraiLogic'
src/test/java/test/SudokuStorageModelTest.java:15:	UnusedImports:	UnusedImports: Unused import 'logic.SamuraiLogic'
src/test/java/test/SudokuStorageModelTest.java:19:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/SudokuStorageModelTest.java:19:	AtLeastOneConstructor:	AtLeastOneConstructor: Each class should declare at least one constructor
src/test/java/test/SudokuStorageModelTest.java:19:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/SudokuStorageModelTest.java:19:	CommentRequired:	CommentRequired: Class comments are required
src/test/java/test/SudokuStorageModelTest.java:21:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/SudokuStorageModelTest.java:21:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/SudokuStorageModelTest.java:21:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the ssmt field if you want a default access modifier
src/test/java/test/SudokuStorageModelTest.java:21:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the ssmt field if you want a default access modifier
src/test/java/test/SudokuStorageModelTest.java:21:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/SudokuStorageModelTest.java:21:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/SudokuStorageModelTest.java:21:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/SudokuStorageModelTest.java:21:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/SudokuStorageModelTest.java:22:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/SudokuStorageModelTest.java:22:	BeanMembersShouldSerialize:	BeanMembersShouldSerialize: Found non-transient, non-static member. Please mark as transient or provide accessors.
src/test/java/test/SudokuStorageModelTest.java:22:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/test/java/test/SudokuStorageModelTest.java:22:	CommentDefaultAccessModifier:	CommentDefaultAccessModifier: To avoid mistakes add a comment at the beginning of the model field if you want a default access modifier
src/test/java/test/SudokuStorageModelTest.java:22:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/SudokuStorageModelTest.java:22:	CommentRequired:	CommentRequired: Field comments are required
src/test/java/test/SudokuStorageModelTest.java:22:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/SudokuStorageModelTest.java:22:	DefaultPackage:	DefaultPackage: Use explicit scoping instead of the default package private level
src/test/java/test/SudokuStorageModelTest.java:25:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuStorageModelTest.java:25:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuStorageModelTest.java:31:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuStorageModelTest.java:31:	CommentRequired:	CommentRequired: Public method and constructor comments are required
src/test/java/test/SudokuStorageModelTest.java:31:	JUnitTestsShouldIncludeAssert:	JUnitTestsShouldIncludeAssert: JUnit tests should include assert() or fail()
src/test/java/test/SudokuStorageModelTest.java:31:	JUnitTestsShouldIncludeAssert:	JUnitTestsShouldIncludeAssert: JUnit tests should include assert() or fail()
